'use strict';

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

var _serveFavicon = require('serve-favicon');

var _serveFavicon2 = _interopRequireDefault(_serveFavicon);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _chokidar = require('chokidar');

var _chokidar2 = _interopRequireDefault(_chokidar);

var _compression = require('compression');

var _compression2 = _interopRequireDefault(_compression);

var _ssr = require('./ssr');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Development Libraries
var PROD = process.env.NODE_ENV === 'production';

var app = (0, _express2.default)();

app.use((0, _serveFavicon2.default)(__dirname + '/favicon.ico'));

// Production settings
if (PROD) {
  app.use((0, _compression2.default)());
  app.use('/static', _express2.default.static('build'));

  app.get('*', _ssr.renderPage);

  // Development settings
} else if (!PROD) {
  var devWebpackConfig = require('../../webpack/webpack.config.dev');
  var compiler = (0, _webpack2.default)(devWebpackConfig);

  app.use(require('webpack-dev-middleware')(compiler, {
    noInfo: true,
    publicPath: devWebpackConfig.output.publicPath
  }));

  app.use(require('webpack-hot-middleware')(compiler, {
    log: console.log
  }));

  app.get('*', _ssr.renderDevPage);

  // Do "hot-reloading" of express stuff on the server
  // Throw away cached modules and re-require next time
  // Ensure there's no important state in there!
  var watcher = _chokidar2.default.watch('.', { ignored: /[\/\\]node_modules[\/\\]/ });

  watcher.on('ready', function () {
    watcher.on('all', function () {
      Object.keys(require.cache).forEach(function (id) {
        if (/[\/\\]server[\/\\]/.test(id)) {
          console.log('Clearing'.yellow + ' ' + ('/server/'.red + id.split(/[\/\\]server[\/\\]/)[1].red) + ' ' + 'module cache from server'.yellow);
          delete require.cache[id];
        }
      });
    });
  });

  // Do "hot-reloading" of react stuff on the server
  // Throw away the cached client modules and let them be re-required next time
  compiler.plugin('done', function () {
    console.log("Clearing /client/ module cache from server");
    Object.keys(require.cache).forEach(function (id) {
      if (/[\/\\]client[\/\\]/.test(id)) {
        console.log('Clearing'.yellow + ' ' + ('/server/'.red + id.split(/[\/\\]client[\/\\]/)[1].red) + ' ' + 'module cache from server'.yellow);
        delete require.cache[id];
      } else if (/[\/\\]universal[\/\\]/.test(id)) {
        console.log('Clearing'.yellow + ' ' + ('/server/'.red + id.split(/[\/\\]universal[\/\\]/)[1].red) + ' ' + 'module cache from server'.yellow);
        delete require.cache[id];
      }
    });
  });
}

var server = _http2.default.createServer(app);
var PORT = process.env.PORT || 8080;

server.listen(PORT, function () {
  var address = server.address();
  console.log('>>>'.cyan + ' ' + 'Listening on:'.rainbow + ' ' + 'localhost::'.trap.magenta + ('' + address.port).green);
});
